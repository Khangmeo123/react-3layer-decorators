{"version":3,"file":"index.js","sources":["src/DecoratorSymbol.ts","src/Enum.ts","src/BasePrototype.ts","src/Field.ts","src/List.ts","src/DayjsField.ts","src/MomentField.ts","src/ObjectField.ts","src/ObjectList.ts"],"sourcesContent":["export enum DecoratorSymbol {\r\n  RAW_VALUE = '__RAW_VALUE__',\r\n  PROTOTYPE = '__PROTOTYPE__',\r\n}\r\n","import 'reflect-metadata';\r\nimport { DecoratorSymbol } from './DecoratorSymbol';\r\n\r\n/**\r\n * Decorate a field as enum value\r\n *\r\n * @param enumObject\r\n * @constructor\r\n */\r\nexport const Enum = (\r\n  enumObject: Record<string, string | number | boolean>,\r\n): PropertyDecorator => {\r\n  return (Target: any, property: string | symbol): void => {\r\n    Object.defineProperty(Target, property, {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get() {\r\n        return Reflect.getMetadata(DecoratorSymbol.RAW_VALUE, this, property);\r\n      },\r\n      set(value: any) {\r\n        Object.defineProperty(this, property, {\r\n          enumerable: true,\r\n          configurable: false,\r\n          get() {\r\n            return Reflect.getMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n          set(value: any) {\r\n            if (value === null || value === undefined) {\r\n              Reflect.defineMetadata(\r\n                DecoratorSymbol.RAW_VALUE,\r\n                value,\r\n                this,\r\n                property,\r\n              );\r\n              return;\r\n            }\r\n            const values: any[] = Object.values(enumObject);\r\n            if (!values.includes(value)) {\r\n              throw new Error(\r\n                `Value ${value} is not a member of enum { ${values.join(\r\n                  ', ',\r\n                )} }`,\r\n              );\r\n            }\r\n            Reflect.defineMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              value,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n        });\r\n        this[property] = value;\r\n      },\r\n    });\r\n  };\r\n};\r\n","import 'reflect-metadata';\r\nimport { DecoratorSymbol } from './DecoratorSymbol';\r\n\r\nexport class BasePrototype {\r\n  public readonly name: string;\r\n\r\n  private readonly descriptors: Record<string, PropertyDescriptor> = {};\r\n\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n\r\n  public get propertyDescriptors(): Record<string, PropertyDescriptor> {\r\n    return this.descriptors;\r\n  }\r\n\r\n  public static getOrCreate(\r\n    Target: new (...args: any[]) => any,\r\n  ): BasePrototype {\r\n    if (!Reflect.hasMetadata(DecoratorSymbol.PROTOTYPE, Target)) {\r\n      const basePrototype = new BasePrototype(Target.name);\r\n      Reflect.defineMetadata(DecoratorSymbol.PROTOTYPE, basePrototype, Target);\r\n    }\r\n    return Reflect.getMetadata(DecoratorSymbol.PROTOTYPE, Target)!;\r\n  }\r\n\r\n  public setPropertyDescriptor = (\r\n    property: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    if (!Object.prototype.hasOwnProperty.call(this.descriptors, property)) {\r\n      Object.defineProperty(this.descriptors, property, {\r\n        get: () => descriptor,\r\n        enumerable: true,\r\n        configurable: false,\r\n      });\r\n    }\r\n  };\r\n}\r\n","import 'reflect-metadata';\r\nimport { DecoratorSymbol } from './DecoratorSymbol';\r\nimport { BasePrototype } from './BasePrototype';\r\n\r\n/**\r\n * Decorate a field with primitive format: String, Number, Boolean\r\n *\r\n * @param prototype {Function}\r\n * @constructor\r\n */\r\nexport const Field = (\r\n  prototype: (...params: any[]) => any,\r\n): PropertyDecorator => {\r\n  return (Target: any, property: string | symbol): void => {\r\n    const basePrototype = BasePrototype.getOrCreate(Target.constructor);\r\n\r\n    const descriptor: PropertyDescriptor = {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get() {\r\n        return Reflect.getMetadata(DecoratorSymbol.RAW_VALUE, this, property);\r\n      },\r\n      set(value: any) {\r\n        Object.defineProperty(this, property, {\r\n          enumerable: true,\r\n          configurable: false,\r\n          get() {\r\n            return Reflect.getMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n          set(value: any) {\r\n            if (value === null || value === undefined) {\r\n              Reflect.defineMetadata(\r\n                DecoratorSymbol.RAW_VALUE,\r\n                value,\r\n                this,\r\n                property,\r\n              );\r\n              return;\r\n            }\r\n            Reflect.defineMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              prototype(value),\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n        });\r\n        (this as any)[property] = value;\r\n      },\r\n    };\r\n\r\n    Object.defineProperty(Target, property, descriptor);\r\n    basePrototype.setPropertyDescriptor(property, descriptor);\r\n  };\r\n};\r\n","import 'reflect-metadata';\r\nimport { DecoratorSymbol } from './DecoratorSymbol';\r\nimport { BasePrototype } from './BasePrototype';\r\n\r\n/**\r\n * Decorate a field as a list of primitive values\r\n *\r\n * @param prototype {Function}\r\n * @constructor\r\n */\r\nexport const List = (\r\n  prototype: (...params: any[]) => any,\r\n): PropertyDecorator => {\r\n  return (Target: any, property: string | symbol): void => {\r\n    const basePrototype = BasePrototype.getOrCreate(Target.constructor);\r\n\r\n    const descriptor: PropertyDescriptor = {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get() {\r\n        return Reflect.getMetadata(DecoratorSymbol.RAW_VALUE, this, property);\r\n      },\r\n      set(value: any) {\r\n        Object.defineProperty(this, property, {\r\n          enumerable: true,\r\n          configurable: false,\r\n          get() {\r\n            return Reflect.getMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n          set(value: any) {\r\n            const instances = value?.map((element: any) => {\r\n              if (element === null || element === undefined) {\r\n                return element;\r\n              }\r\n              return prototype(element);\r\n            });\r\n            Reflect.defineMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              instances,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n        });\r\n        (this as any)[property] = value;\r\n      },\r\n    };\r\n\r\n    Object.defineProperty(Target, property, descriptor);\r\n    basePrototype.setPropertyDescriptor(property, descriptor);\r\n  };\r\n};\r\n","import { DecoratorSymbol } from './DecoratorSymbol';\r\n\r\nimport { BasePrototype } from './BasePrototype';\r\nimport dayjs from 'dayjs';\r\n\r\n\r\n/**\r\n * Decorate a field with moment format\r\n *\r\n * @constructor\r\n */\r\nexport const DayjsField = (): PropertyDecorator => {\r\n  return (Target: any, property: string | symbol): void => {\r\n    const basePrototype = BasePrototype.getOrCreate(Target.constructor);\r\n\r\n    const descriptor: PropertyDescriptor = {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get() {\r\n        return Reflect.getMetadata(DecoratorSymbol.RAW_VALUE, this, property);\r\n      },\r\n      set(value: any) {\r\n        Object.defineProperty(this, property, {\r\n          enumerable: true,\r\n          configurable: false,\r\n          get() {\r\n            return Reflect.getMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n          set(value: any) {\r\n            if (value === null || value === undefined) {\r\n              Reflect.defineMetadata(\r\n                DecoratorSymbol.RAW_VALUE,\r\n                value,\r\n                this,\r\n                property,\r\n              );\r\n              return;\r\n            }\r\n            Reflect.defineMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              dayjs(value),\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n        });\r\n        (this as any)[property] = value;\r\n      },\r\n    };\r\n\r\n    Object.defineProperty(Target, property, descriptor);\r\n    basePrototype.setPropertyDescriptor(property, descriptor);\r\n  };\r\n};\r\n","import { DecoratorSymbol } from './DecoratorSymbol';\r\n\r\nimport { BasePrototype } from './BasePrototype';\r\nimport  moment from 'moment';\r\n\r\n/**\r\n * Decorate a field with moment format\r\n *\r\n * @constructor\r\n */\r\nexport const MomentField = (): PropertyDecorator => {\r\n  return (Target: any, property: string | symbol): void => {\r\n    const basePrototype = BasePrototype.getOrCreate(Target.constructor);\r\n\r\n    const descriptor: PropertyDescriptor = {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get() {\r\n        return Reflect.getMetadata(DecoratorSymbol.RAW_VALUE, this, property);\r\n      },\r\n      set(value: any) {\r\n        Object.defineProperty(this, property, {\r\n          enumerable: true,\r\n          configurable: false,\r\n          get() {\r\n            return Reflect.getMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n          set(value: any) {\r\n            if (value === null || value === undefined) {\r\n              Reflect.defineMetadata(\r\n                DecoratorSymbol.RAW_VALUE,\r\n                value,\r\n                this,\r\n                property,\r\n              );\r\n              return;\r\n            }\r\n            Reflect.defineMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              moment(value).format(),\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n        });\r\n        (this as any)[property] = value;\r\n      },\r\n    };\r\n\r\n    Object.defineProperty(Target, property, descriptor);\r\n    basePrototype.setPropertyDescriptor(property, descriptor);\r\n  };\r\n};\r\n","import 'reflect-metadata';\r\nimport { DecoratorSymbol } from './DecoratorSymbol';\r\nimport { BasePrototype } from './BasePrototype';\r\n\r\n/**\r\n * Decorate a field as a model relation\r\n *\r\n * @param constructor\r\n * @constructor\r\n */\r\nexport const ObjectField = (\r\n  constructor?: new (...params: any[]) => any,\r\n): PropertyDecorator => {\r\n  return (Target: any, property: string | symbol): void => {\r\n    const basePrototype = BasePrototype.getOrCreate(Target.constructor);\r\n\r\n    const descriptor: PropertyDescriptor = {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get() {\r\n        return Reflect.getMetadata(DecoratorSymbol.RAW_VALUE, this, property);\r\n      },\r\n      set(value: any) {\r\n        Object.defineProperty(this, property, {\r\n          enumerable: true,\r\n          configurable: false,\r\n          get() {\r\n            return Reflect.getMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n          set(value: any) {\r\n            if (\r\n              value === null ||\r\n              value === undefined ||\r\n              value instanceof Target.constructor\r\n            ) {\r\n              Reflect.defineMetadata(\r\n                DecoratorSymbol.RAW_VALUE,\r\n                value,\r\n                this,\r\n                property,\r\n              );\r\n              return;\r\n            }\r\n            let instance;\r\n            const InstanceConstructor = constructor ?? Target.constructor;\r\n            if (typeof InstanceConstructor.create === 'function') {\r\n              instance = InstanceConstructor.create();\r\n            } else {\r\n              instance = new InstanceConstructor();\r\n            }\r\n            Object.assign(instance, value);\r\n            Reflect.defineMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              instance,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n        });\r\n        (this as any)[property] = value;\r\n      },\r\n    };\r\n\r\n    Object.defineProperty(Target, property, descriptor);\r\n    basePrototype.setPropertyDescriptor(property, descriptor);\r\n  };\r\n};\r\n","import 'reflect-metadata';\r\nimport { DecoratorSymbol } from './DecoratorSymbol';\r\nimport { BasePrototype } from './BasePrototype';\r\n\r\n/**\r\n * Decorate a field as a list of model relation\r\n *\r\n * @param constructor\r\n * @constructor\r\n */\r\nexport const ObjectList = (\r\n  constructor?: new (...args: any[]) => any,\r\n): PropertyDecorator => {\r\n  return (Target: any, property: string | symbol): void => {\r\n    const basePrototype = BasePrototype.getOrCreate(Target.constructor);\r\n\r\n    const descriptor: PropertyDescriptor = {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get() {\r\n        return Reflect.getMetadata(DecoratorSymbol.RAW_VALUE, this, property);\r\n      },\r\n      set(value: any) {\r\n        Object.defineProperty(this, property, {\r\n          enumerable: true,\r\n          configurable: false,\r\n          get() {\r\n            return Reflect.getMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n          set(value: any) {\r\n            const InstanceConstructor = constructor ?? Target.constructor;\r\n            const instances = value?.map((element: any) => {\r\n              let instance;\r\n              if (typeof InstanceConstructor.create === 'function') {\r\n                instance = InstanceConstructor.create();\r\n              } else {\r\n                instance = new InstanceConstructor();\r\n              }\r\n              if (typeof element === 'object' && element !== null) {\r\n                Object.assign(instance, element);\r\n              }\r\n              return instance;\r\n            });\r\n            Reflect.defineMetadata(\r\n              DecoratorSymbol.RAW_VALUE,\r\n              instances,\r\n              this,\r\n              property,\r\n            );\r\n          },\r\n        });\r\n        (this as any)[property] = value;\r\n      },\r\n    };\r\n\r\n    Object.defineProperty(Target, property, descriptor);\r\n    basePrototype.setPropertyDescriptor(property, descriptor);\r\n  };\r\n};\r\n"],"names":[],"mappings":";;;;AAAA,IAAY,eAGX,CAAA;AAHD,CAAA,UAAY,eAAe,EAAA;AACzB,IAAA,eAAA,CAAA,WAAA,CAAA,GAAA,eAA2B,CAAA;AAC3B,IAAA,eAAA,CAAA,WAAA,CAAA,GAAA,eAA2B,CAAA;AAC7B,CAAC,EAHW,eAAe,KAAf,eAAe,GAG1B,EAAA,CAAA,CAAA;;ACAD;;;;;AAKG;AACU,MAAA,IAAI,GAAG,CAClB,UAAqD,KAChC;AACrB,IAAA,OAAO,CAAC,MAAW,EAAE,QAAyB,KAAU;AACtD,QAAA,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE;AACtC,YAAA,UAAU,EAAE,IAAI;AAChB,YAAA,YAAY,EAAE,IAAI;YAClB,GAAG,GAAA;AACD,gBAAA,OAAO,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;aACvE;AACD,YAAA,GAAG,CAAC,KAAU,EAAA;AACZ,gBAAA,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AACpC,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,YAAY,EAAE,KAAK;oBACnB,GAAG,GAAA;AACD,wBAAA,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,SAAS,EACzB,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACD,oBAAA,GAAG,CAAC,KAAU,EAAA;wBACZ,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AACzC,4BAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,KAAK,EACL,IAAI,EACJ,QAAQ,CACT,CAAC;4BACF,OAAO;yBACR;wBACD,MAAM,MAAM,GAAU,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;wBAChD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AAC3B,4BAAA,MAAM,IAAI,KAAK,CACb,CAAA,MAAA,EAAS,KAAK,CAA8B,2BAAA,EAAA,MAAM,CAAC,IAAI,CACrD,IAAI,CACL,CAAA,EAAA,CAAI,CACN,CAAC;yBACH;AACD,wBAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,KAAK,EACL,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACF,iBAAA,CAAC,CAAC;AACH,gBAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACxB;AACF,SAAA,CAAC,CAAC;AACL,KAAC,CAAC;AACJ;;MCzDa,aAAa,CAAA;AAKxB,IAAA,WAAA,CAAY,IAAY,EAAA;QAFP,IAAW,CAAA,WAAA,GAAuC,EAAE,CAAC;AAoB/D,QAAA,IAAA,CAAA,qBAAqB,GAAG,CAC7B,QAAyB,EACzB,UAA8B,KAC5B;AACF,YAAA,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,EAAE;gBACrE,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE;AAChD,oBAAA,GAAG,EAAE,MAAM,UAAU;AACrB,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,YAAY,EAAE,KAAK;AACpB,iBAAA,CAAC,CAAC;aACJ;AACH,SAAC,CAAC;AA5BA,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;AAED,IAAA,IAAW,mBAAmB,GAAA;QAC5B,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;IAEM,OAAO,WAAW,CACvB,MAAmC,EAAA;AAEnC,QAAA,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE;YAC3D,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACrD,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,SAAS,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;SAC1E;QACD,OAAO,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,MAAM,CAAE,CAAC;KAChE;AAcF;;AClCD;;;;;AAKG;AACU,MAAA,KAAK,GAAG,CACnB,SAAoC,KACf;AACrB,IAAA,OAAO,CAAC,MAAW,EAAE,QAAyB,KAAU;QACtD,MAAM,aAAa,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAEpE,QAAA,MAAM,UAAU,GAAuB;AACrC,YAAA,UAAU,EAAE,IAAI;AAChB,YAAA,YAAY,EAAE,IAAI;YAClB,GAAG,GAAA;AACD,gBAAA,OAAO,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;aACvE;AACD,YAAA,GAAG,CAAC,KAAU,EAAA;AACZ,gBAAA,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AACpC,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,YAAY,EAAE,KAAK;oBACnB,GAAG,GAAA;AACD,wBAAA,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,SAAS,EACzB,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACD,oBAAA,GAAG,CAAC,KAAU,EAAA;wBACZ,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AACzC,4BAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,KAAK,EACL,IAAI,EACJ,QAAQ,CACT,CAAC;4BACF,OAAO;yBACR;AACD,wBAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,SAAS,CAAC,KAAK,CAAC,EAChB,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACF,iBAAA,CAAC,CAAC;AACF,gBAAA,IAAY,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACjC;SACF,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AACpD,QAAA,aAAa,CAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC5D,KAAC,CAAC;AACJ;;ACtDA;;;;;AAKG;AACU,MAAA,IAAI,GAAG,CAClB,SAAoC,KACf;AACrB,IAAA,OAAO,CAAC,MAAW,EAAE,QAAyB,KAAU;QACtD,MAAM,aAAa,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAEpE,QAAA,MAAM,UAAU,GAAuB;AACrC,YAAA,UAAU,EAAE,IAAI;AAChB,YAAA,YAAY,EAAE,IAAI;YAClB,GAAG,GAAA;AACD,gBAAA,OAAO,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;aACvE;AACD,YAAA,GAAG,CAAC,KAAU,EAAA;AACZ,gBAAA,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AACpC,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,YAAY,EAAE,KAAK;oBACnB,GAAG,GAAA;AACD,wBAAA,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,SAAS,EACzB,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACD,oBAAA,GAAG,CAAC,KAAU,EAAA;AACZ,wBAAA,MAAM,SAAS,GAAG,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,GAAG,CAAC,CAAC,OAAY,KAAI;4BAC5C,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,EAAE;AAC7C,gCAAA,OAAO,OAAO,CAAC;6BAChB;AACD,4BAAA,OAAO,SAAS,CAAC,OAAO,CAAC,CAAC;AAC5B,yBAAC,CAAC,CAAC;AACH,wBAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,SAAS,EACT,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACF,iBAAA,CAAC,CAAC;AACF,gBAAA,IAAY,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACjC;SACF,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AACpD,QAAA,aAAa,CAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC5D,KAAC,CAAC;AACJ;;ACjDA;;;;AAIG;AACI,MAAM,UAAU,GAAG,MAAwB;AAChD,IAAA,OAAO,CAAC,MAAW,EAAE,QAAyB,KAAU;QACtD,MAAM,aAAa,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAEpE,QAAA,MAAM,UAAU,GAAuB;AACrC,YAAA,UAAU,EAAE,IAAI;AAChB,YAAA,YAAY,EAAE,IAAI;YAClB,GAAG,GAAA;AACD,gBAAA,OAAO,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;aACvE;AACD,YAAA,GAAG,CAAC,KAAU,EAAA;AACZ,gBAAA,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AACpC,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,YAAY,EAAE,KAAK;oBACnB,GAAG,GAAA;AACD,wBAAA,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,SAAS,EACzB,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACD,oBAAA,GAAG,CAAC,KAAU,EAAA;wBACZ,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AACzC,4BAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,KAAK,EACL,IAAI,EACJ,QAAQ,CACT,CAAC;4BACF,OAAO;yBACR;AACD,wBAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,KAAK,CAAC,KAAK,CAAC,EACZ,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACF,iBAAA,CAAC,CAAC;AACF,gBAAA,IAAY,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACjC;SACF,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AACpD,QAAA,aAAa,CAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC5D,KAAC,CAAC;AACJ;;ACpDA;;;;AAIG;AACI,MAAM,WAAW,GAAG,MAAwB;AACjD,IAAA,OAAO,CAAC,MAAW,EAAE,QAAyB,KAAU;QACtD,MAAM,aAAa,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAEpE,QAAA,MAAM,UAAU,GAAuB;AACrC,YAAA,UAAU,EAAE,IAAI;AAChB,YAAA,YAAY,EAAE,IAAI;YAClB,GAAG,GAAA;AACD,gBAAA,OAAO,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;aACvE;AACD,YAAA,GAAG,CAAC,KAAU,EAAA;AACZ,gBAAA,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AACpC,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,YAAY,EAAE,KAAK;oBACnB,GAAG,GAAA;AACD,wBAAA,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,SAAS,EACzB,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACD,oBAAA,GAAG,CAAC,KAAU,EAAA;wBACZ,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AACzC,4BAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,KAAK,EACL,IAAI,EACJ,QAAQ,CACT,CAAC;4BACF,OAAO;yBACR;AACD,wBAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EACtB,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACF,iBAAA,CAAC,CAAC;AACF,gBAAA,IAAY,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACjC;SACF,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AACpD,QAAA,aAAa,CAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC5D,KAAC,CAAC;AACJ;;ACpDA;;;;;AAKG;AACU,MAAA,WAAW,GAAG,CACzB,WAA2C,KACtB;AACrB,IAAA,OAAO,CAAC,MAAW,EAAE,QAAyB,KAAU;QACtD,MAAM,aAAa,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAEpE,QAAA,MAAM,UAAU,GAAuB;AACrC,YAAA,UAAU,EAAE,IAAI;AAChB,YAAA,YAAY,EAAE,IAAI;YAClB,GAAG,GAAA;AACD,gBAAA,OAAO,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;aACvE;AACD,YAAA,GAAG,CAAC,KAAU,EAAA;AACZ,gBAAA,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AACpC,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,YAAY,EAAE,KAAK;oBACnB,GAAG,GAAA;AACD,wBAAA,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,SAAS,EACzB,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACD,oBAAA,GAAG,CAAC,KAAU,EAAA;wBACZ,IACE,KAAK,KAAK,IAAI;AACd,4BAAA,KAAK,KAAK,SAAS;AACnB,4BAAA,KAAK,YAAY,MAAM,CAAC,WAAW,EACnC;AACA,4BAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,KAAK,EACL,IAAI,EACJ,QAAQ,CACT,CAAC;4BACF,OAAO;yBACR;AACD,wBAAA,IAAI,QAAQ,CAAC;wBACb,MAAM,mBAAmB,GAAG,WAAW,KAAX,IAAA,IAAA,WAAW,KAAX,KAAA,CAAA,GAAA,WAAW,GAAI,MAAM,CAAC,WAAW,CAAC;AAC9D,wBAAA,IAAI,OAAO,mBAAmB,CAAC,MAAM,KAAK,UAAU,EAAE;AACpD,4BAAA,QAAQ,GAAG,mBAAmB,CAAC,MAAM,EAAE,CAAC;yBACzC;6BAAM;AACL,4BAAA,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;yBACtC;AACD,wBAAA,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC/B,wBAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,QAAQ,EACR,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACF,iBAAA,CAAC,CAAC;AACF,gBAAA,IAAY,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACjC;SACF,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AACpD,QAAA,aAAa,CAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC5D,KAAC,CAAC;AACJ;;AClEA;;;;;AAKG;AACU,MAAA,UAAU,GAAG,CACxB,WAAyC,KACpB;AACrB,IAAA,OAAO,CAAC,MAAW,EAAE,QAAyB,KAAU;QACtD,MAAM,aAAa,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAEpE,QAAA,MAAM,UAAU,GAAuB;AACrC,YAAA,UAAU,EAAE,IAAI;AAChB,YAAA,YAAY,EAAE,IAAI;YAClB,GAAG,GAAA;AACD,gBAAA,OAAO,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;aACvE;AACD,YAAA,GAAG,CAAC,KAAU,EAAA;AACZ,gBAAA,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AACpC,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,YAAY,EAAE,KAAK;oBACnB,GAAG,GAAA;AACD,wBAAA,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,SAAS,EACzB,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACD,oBAAA,GAAG,CAAC,KAAU,EAAA;wBACZ,MAAM,mBAAmB,GAAG,WAAW,KAAX,IAAA,IAAA,WAAW,KAAX,KAAA,CAAA,GAAA,WAAW,GAAI,MAAM,CAAC,WAAW,CAAC;AAC9D,wBAAA,MAAM,SAAS,GAAG,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,GAAG,CAAC,CAAC,OAAY,KAAI;AAC5C,4BAAA,IAAI,QAAQ,CAAC;AACb,4BAAA,IAAI,OAAO,mBAAmB,CAAC,MAAM,KAAK,UAAU,EAAE;AACpD,gCAAA,QAAQ,GAAG,mBAAmB,CAAC,MAAM,EAAE,CAAC;6BACzC;iCAAM;AACL,gCAAA,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;6BACtC;4BACD,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,EAAE;AACnD,gCAAA,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;6BAClC;AACD,4BAAA,OAAO,QAAQ,CAAC;AAClB,yBAAC,CAAC,CAAC;AACH,wBAAA,OAAO,CAAC,cAAc,CACpB,eAAe,CAAC,SAAS,EACzB,SAAS,EACT,IAAI,EACJ,QAAQ,CACT,CAAC;qBACH;AACF,iBAAA,CAAC,CAAC;AACF,gBAAA,IAAY,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACjC;SACF,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AACpD,QAAA,aAAa,CAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC5D,KAAC,CAAC;AACJ;;;;;;;;;;"}